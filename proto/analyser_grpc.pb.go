// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: analyser.proto

package analyser

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnalyserClient is the client API for Analyser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalyserClient interface {
	// Analyse is an endpoint that accepts a user agent string, analyses it and returns information about it.
	AnalyseUserAgent(ctx context.Context, in *AnalyseUserAgentRequest, opts ...grpc.CallOption) (*AnalyseUserAgentResponse, error)
}

type analyserClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyserClient(cc grpc.ClientConnInterface) AnalyserClient {
	return &analyserClient{cc}
}

func (c *analyserClient) AnalyseUserAgent(ctx context.Context, in *AnalyseUserAgentRequest, opts ...grpc.CallOption) (*AnalyseUserAgentResponse, error) {
	out := new(AnalyseUserAgentResponse)
	err := c.cc.Invoke(ctx, "/analyser.Analyser/AnalyseUserAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalyserServer is the server API for Analyser service.
// All implementations must embed UnimplementedAnalyserServer
// for forward compatibility
type AnalyserServer interface {
	// Analyse is an endpoint that accepts a user agent string, analyses it and returns information about it.
	AnalyseUserAgent(context.Context, *AnalyseUserAgentRequest) (*AnalyseUserAgentResponse, error)
	mustEmbedUnimplementedAnalyserServer()
}

// UnimplementedAnalyserServer must be embedded to have forward compatible implementations.
type UnimplementedAnalyserServer struct {
}

func (UnimplementedAnalyserServer) AnalyseUserAgent(context.Context, *AnalyseUserAgentRequest) (*AnalyseUserAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyseUserAgent not implemented")
}
func (UnimplementedAnalyserServer) mustEmbedUnimplementedAnalyserServer() {}

// UnsafeAnalyserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalyserServer will
// result in compilation errors.
type UnsafeAnalyserServer interface {
	mustEmbedUnimplementedAnalyserServer()
}

func RegisterAnalyserServer(s grpc.ServiceRegistrar, srv AnalyserServer) {
	s.RegisterService(&Analyser_ServiceDesc, srv)
}

func _Analyser_AnalyseUserAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyseUserAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyserServer).AnalyseUserAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/analyser.Analyser/AnalyseUserAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyserServer).AnalyseUserAgent(ctx, req.(*AnalyseUserAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Analyser_ServiceDesc is the grpc.ServiceDesc for Analyser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Analyser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "analyser.Analyser",
	HandlerType: (*AnalyserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnalyseUserAgent",
			Handler:    _Analyser_AnalyseUserAgent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "analyser.proto",
}
